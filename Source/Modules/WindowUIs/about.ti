unit
%About Window Interface
%Colin Creamer
%August 2 2011

%Displays the About Page

module About
    %---Imports/Exports---
    import GUI
    export Show, SetAppName, SetVersion, SetYear

    %----Global Vars------
    const font := Font.New ("Arial:12")
    var windowID : int
    var done_Btn : int


    %Lables
    var labelNames : array 1 .. * of string := init (
	"Closed Cap Gen",
	"Version: Unknown",
	"Copyright 2012",
	"-",
	"Richard Colin Creamer")
    var lableID : array 1 .. upper (labelNames) of int



    %Setting Exports
    proc SetAppName (newName : string)
	labelNames (1) := newName
    end SetAppName

    proc SetVersion (newVer : string)
	labelNames (2) := newVer
    end SetVersion

    proc SetYear (newYear : string)
	labelNames (3) := "Copyright " + newYear
    end SetYear

    %Main Exports

    proc inishalizeLables
	%Settings
	var x : int := 0
	var y : int := 40
	const lineColor : int := darkgrey
	const width : int := maxx
	const height : int := maxy - 50
	const marginX : int := 10
	const marginY : int := 10

	%Calculated Table Vars
	const tableStartY : int := height - (marginY * 2)         %Y pos of the tables top left corner
	const rowHeight : int := (tableStartY) div upper (labelNames) %Calculated height of a table row
	var rY : int := y + marginY + tableStartY %Global Y Position of row line
	var rX : int := x + marginX             %Global Left X Positions of row line
	var rXX : int := x + width - marginX    %Global Right X Positions of row line

	%Draws Rows
	%Draw.Line (rX, rY, rXX, rY, lineColor) %Draws top line
	for i : 1 .. upper (labelNames)
	    %Row Calculations
	    rY := y + marginY + tableStartY - (rowHeight * i)
	    rX := x + marginX
	    rXX := x + width - marginX
	    %Draws Rows
	    Draw.Line (rX, rY, rXX, rY, lineColor)
	    lableID (i) := GUI.CreateLabelFull (0, rY + 2, labelNames (i), width, rowHeight, GUI.CENTER + GUI.MIDDLE, 0)
	end for
    end inishalizeLables


    procedure Show
	windowID := Window.Open ("graphics:200;220, title:About, position:center;center")
	done_Btn := GUI.CreateButton (maxx div 2 - 50, 10, 100, "Done", GUI.Quit)
	inishalizeLables

	loop
	    if Window.GetActive = defWinID then
		GUI.Quit
	    end if
	    exit when GUI.ProcessEvent
	    Time.DelaySinceLast (15)
	end loop
	GUI.ResetQuit

	%Closes the window and Disposed of all GUI Wigits in it
	GUI.CloseWindow (windowID)

    end Show

end About


