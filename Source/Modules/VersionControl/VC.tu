unit
%Version Control Managment Module
%Colin Creamer
%August 12 2011

%August 19 2011

/*
 This module will detect wether the program is runing from within
 the Turing editor IDE (integrated development environment)

 -It will store the version numbering and other build related information.
 -If run from IDE, it will save out a new copy of the source code whenever the
 version number has change.

 All Compile time information will be saved dynamicaly in a generated turing include
 file. The Data will be acessable on next compile

 */

module VC

    export
	SetVersion,
	GetVersionStr, GetVersionStrFull, GetCustomVerStr,
	InIDE, Ver

    %----- Variables ------

    type versionData :
	record
	    %Standard 4 Version Values
	    Major : int %completely new version
	    Minor : int %Large Change
	    Revision : int %Small Change
	    Build : int %Run-Compile counter

	    %Aditional Build Info
	    BuildTime : int %Time of Run-Compile in seconds since 1970
	    BuildMachine : string %The Computer compiled on

	    %Optional Word appened to the end of the version (Alpha, Beta, RC, Pro)
	    Suffix : string %(Alpha, Beta, RC, Pro)
	end record

    var Ver : versionData

    %Sets Defult Values
    Ver.Major := 0
    Ver.Minor := 0
    Ver.Revision := 0
    Ver.Build := 0
    Ver.Suffix := ""
    var lastVersion : string := ""


    const programRoot : string := Dir.Current
    const moduleRoot : string := programRoot + "\\Modules\\VersionControl\\"
    %const compileTimeDataFile : string := "CompileTimeData.ti"

    include "CompileTimeData.ti"


    /* Will detect if the program is running in the IDE
     ----------------------------------------------------
     The Turing environment has a bug where the Argument catch does not work when compiled.
     Argument entry 0 is supposed to return the file path to the executing program. This works
     when running it from within the Turing IDE. However, when compiled it returns a null string.
     This exploit can be used to detect if the program is running as a compiled exe or not.
     ----------------------------------------------------*/
    const runningInIDE : boolean := fetcharg (0) not= "" and Dir.Exists (moduleRoot)  %Sets to true if not null
    %----------------------------------------------------



    %------------------------
    % ----- Procedures -----
    %------------------------



    function GetVersionStr () : string
	result intstr (Ver.Major) + "." + intstr (Ver.Minor) + "." + intstr (Ver.Revision)
    end GetVersionStr

    function GetVersionStrFull () : string
	var suf : string
	if Ver.Suffix not= "" then
	    suf := " " + Ver.Suffix
	end if
	result GetVersionStr () + "." + intstr (Ver.Build) + suf
    end GetVersionStrFull

    %genrates any combinnation of version string
    function GetCustomVerStr (segments : int, hasSuffix : boolean) : string
	var v : string := ""
	for i : 0 .. segments
	    case i of
		label 0 :
		label 1 :
		    v += intstr (Ver.Major)
		label 2 :
		    v += "." + intstr (Ver.Minor)
		label 3 :
		    v += "." + intstr (Ver.Revision)
		label 4 :
		    v += "." + intstr (Ver.Build)
		label :
		    exit
	    end case
	end for
	if hasSuffix then
	    if segments > 0 then
		v += " "
	    end if
	    v += Ver.Suffix
	end if
	result v
    end GetCustomVerStr


    %Will Write a turring include file with compile time build data
    procedure writeCompileTimeInclude
	Ver.Build += 1

	var fileNum : int
	open : fileNum, moduleRoot + "CompileTimeData.ti", put
	put : fileNum, "%Compile Time Build Data Include File"
	put : fileNum, "%Generated By: Version Control Module"
	put : fileNum, "%Created By: Colin Creamer"
	put : fileNum, "%August 15 2011"
	put : fileNum, ""
	put : fileNum, "%-------------------------------"
	put : fileNum, "%-----Compile Time Values------"
	put : fileNum, "%-------------------------------"
	put : fileNum, "Ver.Build := ", Ver.Build
	put : fileNum, "Ver.BuildTime := ", Time.Sec ()
	put : fileNum, "Ver.BuildMachine := \"", Sys.GetComputerName, "\""
	put : fileNum, ""
	put : fileNum, " lastVersion := \"", GetVersionStr (), "\""
	close : fileNum
    end writeCompileTimeInclude


    %---------------------------
    % --- Export procedures ---
    %---------------------------



    fcn InIDE () : boolean
	result runningInIDE
    end InIDE


    /*
     %Desided to just use the compare buit in sort.tu

     function CompareIsNewer (compareVerStr:string):boolean
     var strRem : string := compareVerStr

     const major : string := ststrRem (0..index(strRem,"."))



     end CompareIsNewer
     */

    %----------------------------------
    % -------- Main Export ------------
    %----------------------------------

    procedure SetVersion (major, minor, rev : int, suffix : string)

	Ver.Major := major
	Ver.Minor := minor
	Ver.Revision := rev
	Ver.Suffix := Str.Trim (suffix)

	if runningInIDE then
	    const thisVer : string := GetVersionStr ()
	    %Did i change the Version?
	    if lastVersion not= thisVer then
		Ver.Build := 0     %Reset build number
		sound (500, 20)
	    end if
	    lastVersion := thisVer
	    writeCompileTimeInclude
	end if
    end SetVersion


end VC
